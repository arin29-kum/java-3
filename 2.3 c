import java.util.*;
import java.util.stream.*;
import java.util.Map.Entry;

class Product {
    String name;
    double price;
    String category;

    Product(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    @Override
    public String toString() {
        return name + " | " + category + " | " + price;
    }
}

public class ProductStreamOperations {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Laptop", 70000, "Electronics"),
            new Product("Phone", 45000, "Electronics"),
            new Product("TV", 55000, "Electronics"),
            new Product("Shirt", 1500, "Clothing"),
            new Product("Jeans", 2000, "Clothing"),
            new Product("Watch", 3500, "Accessories"),
            new Product("Shoes", 4000, "Accessories")
        );

        // Group by category
        System.out.println("Grouped by Category:");
        Map<String, List<Product>> groupByCategory = products.stream()
            .collect(Collectors.groupingBy(p -> p.category));
        groupByCategory.forEach((category, list) -> {
            System.out.println(category + " -> " + list);
        });

        // Find most expensive product per category
        System.out.println("\nMost Expensive Product in Each Category:");
        Map<String, Optional<Product>> maxByCategory = products.stream()
            .collect(Collectors.groupingBy(p -> p.category,
                    Collectors.maxBy(Comparator.comparingDouble(p -> p.price))));
        maxByCategory.forEach((category, product) -> 
            System.out.println(category + " -> " + product.get())
        );

        // Calculate average price of all products
        double avgPrice = products.stream()
            .collect(Collectors.averagingDouble(p -> p.price));
        System.out.println("\nAverage Price of All Products: " + avgPrice);
    }
}
